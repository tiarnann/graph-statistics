# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
#cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
#minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
#minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
#minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
edgeWeightTotal
length(cc)
as.character(length(cc))
cc$cyclecounts
length(cc$cycles)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc, edgeMat, length(cc))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
edgeWeightTotal
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
while (!foundBoth && idx<=nrow(edgeMat)) {
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
cc$cycles
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
cc$cycles
length(cc$cycles)
length(cc$cycles[3])
length(cc$cycles[[3]])
cc$cycles[[3]]
cc$cycles[[3]][2]
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
edgeWeightTotal
cc $cycles
edgeWeightTotal
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc, edgeMat, length(cc))
message(s)
minimumEdgeWeight
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc$cycles, edgeMat, length(cc$cycles))
message(s)
minimumEdgeWeight
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc$cycles, edgeMat, length(cc$cycles))
message(s)
minimumEdgeWeight
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc$cycles, edgeMat, length(cc$cycles))
message(s)
minimumEdgeWeight
edgeWeightTotal
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
edgeWeightTotal <- cycle.edgeWeightTotal(cc$cycles, edgeMat, length(cc$cycles))
minimumEdgeWeight <- cycle.minimumEdgeWeight(cc$cycles, edgeMat, length(cc$cycles))
message(s)
minimumEdgeWeight
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength", edgeMat)
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength", edges)
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
