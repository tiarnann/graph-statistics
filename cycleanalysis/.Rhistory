nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
cc$mostImportantNodes
c <- list(1,2,3,4,5)
c[1]
c[2]
c[2][1]
c[[2]]
c[[[2]]]
c[[2]]
c[[2]][1]
c[[2]][[1]]
c <- unlist(strsplit("s02", 's', fixed=TRUE))
d <- as.numeric(c[2])
d
d <- as.numeric(c[[2]])
d
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
cc$mostImportantNodes
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
cc$mostImportantNodes
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
library(cycleanalysis)
cc$mostImportantNodes
library(cycleanalysis)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=.4)
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
cc$cyclecounts
cc$mostImportantNodes
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T, row.names=NULL)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T, row.names=NULL)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=3, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
edges
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=3, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=5, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
View(edgeMat)
View(nodes)
View(edges)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=5, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T, row.names=NULL)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T, row.names=NULL)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=3, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
message(s)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T, row.names=NULL)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T, row.names=NULL)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T, row.names=NULL)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T, row.names=NULL)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
View(edgeMat)
View(edges)
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset_edges.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
View(edges)
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes_1000.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset_edges_1000.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
cc$cycles
cc$edgeWeightTotal
cc$minimumEdgeWeight
cc$cyclecounts
cc$mostImportantNodes
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
cc$edgeWeightTotal
cc$minimumEdgeWeight
cc$mostImportantNodes
cc$cycles
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/id_papers.csv", header=T, as.is=T)
edges <- read.csv("sample_data/edges_papers.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/id_papers.csv", header=T, as.is=T)
edges <- read.csv("sample_data/edges_papers.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
nodes
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/ids_papers.csv", header=T, as.is=T)
edges <- read.csv("sample_data/edges_papers.csv", header=T, as.is=T)
#nodes <- read.csv("sample_data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#edges <- read.csv("sample_data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen = 10, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
library(cycleanalysis)
as.matrix(count)
as.matrix(length(ccen))
as.matrix(length(cc))
library(cycleanalysis)
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes_500:1000.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset_edges_500:1000.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
#start.time <- Sys.time()
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen=2, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#(1) change directory
library('cycleanalysis')
library('igraph')
library('statnet')
nodes <- read.csv("sample_data/Dataset_nodes_100:300.csv", header=T, as.is=T)
edges <- read.csv("sample_data/Dataset_edges_100:300.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
adjacencyMat <- get.adjacency(net, sparse=FALSE)
edgeMat <- as.matrix(edges, sparse=FALSE)
plot(net, edge.arrow.size=0.01, edge.arrow.width=0.01, vertex.size=6, vertex.color=rainbow(5, alpha=.5), vertex.label=NA, layout=layout_randomly(net))
# maxlen is the max cycle length to search for
#start.time <- Sys.time()
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen=2, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
#end.time <- Sys.time()
#time.taken <- end.time - start.time
#time.taken
#s <- paste(c("List length ", as.character(length(cc)),"\nHow bou dat"), sep=" ")
#message(s)
cc$edgeWeightTotal
cc$cycles
cc <- kcycle.censusExtension(adjacencyMat, edges, maxlen=5, tabulate.by.vertex = FALSE, cycle.comembership = "bylength")
